#!/bin/bash
#
# Generates sparklines for a comma-separated or space-separated list of data.
#
# Usage:
#
#   $ spark DATA
#   $ spark h[elp]
#
# Source: https://github.com/holman/spark

spark() {
  local n numbers=

  # Find min/max values
  local min=0xffffffff max=0

  for n in ${@//,/ }
  do
    # On Linux (or with bash4) we could use `printf %.0f $n` here to
    # round the number but that doesn't work on OS X (bash3) nor does
    # `awk '{printf "%.0f",$1}' <<< $n` work, so just cut it off
    n=${n%.*}
    (( n < min )) && min=$n
    (( n > max )) && max=$n
    numbers=$numbers${numbers:+ }$n
  done

  # Print ticks
  local ticks=(▁ ▂ ▃ ▄ ▅ ▆ ▇ █)

  # Use a high tick if data is constant
  (( min == max )) && ticks=(▅ ▆)

  local f=$(( (($max - $min) << 8) / (${#ticks[@]} - 1) ))
  (( f < 1 )) && f=1

  for n in $numbers
  do
    printf ${ticks[$(( ((($n - $min) << 8) / $f) ))]}
  done
  echo
}

# If we're being sourced, don't worry about such things
if [ "$BASH_SOURCE" == "$0" ]
  then
  # Prints the help text for spark
  help() {
    local spark=$(basename $0)
    cat <<EOF

  USAGE:
    $ $spark [h|help] DATA

  EXAMPLES:
    $ $spark 1 5 22 13 53
    ▁▁▃▂█
    $ $spark 0,30,55,80,33,150
    ▁▂▃▄▂█
    $ echo 9 13 5 17 1 | $spark
    ▄▆▂█▁

EOF
  }

  # Show help for no arguments if stdin is a terminal
  if { [ -z "$1" ] && [ -t 0 ] ; } || [ "$1" == "h" ] || [ "$1" == "help" ]
  then
    help
    exit 0
  fi

  spark ${@:-`cat`}
fi
